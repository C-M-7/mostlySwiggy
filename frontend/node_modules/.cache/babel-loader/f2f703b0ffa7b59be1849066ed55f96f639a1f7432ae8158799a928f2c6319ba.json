{"ast":null,"code":"import { isMobile } from \"react-device-detect\";\nasync function fetchData(location) {\n  const {\n    latitude,\n    longitude\n  } = location;\n  const url = isMobile ? `https://thingproxy-760k.onrender.com/fetch/https://www.swiggy.com/mapi/homepage/getCards?lat=${latitude}&lng=${longitude}` : `https://thingproxy-760k.onrender.com/fetch/https://www.swiggy.com/dapi/restaurants/list/v5?lat=${latitude}&lng=${longitude}&is-seo-homepage-enabled=true&page_type=DESKTOP_WEB_LISTING`;\n  try {\n    var _desiredCard$gridWidg, _desiredCard$gridWidg2, _desiredCard$gridWidg3, _desiredCard$card, _desiredCard$card$car, _desiredCard$card$car2, _desiredCard$card$car3;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch data from Swiggy API');\n    }\n    const responseData = await response.json();\n    const cards = isMobile ? responseData.data.success.cards : responseData.data.cards;\n\n    // const locUnavailable = isMobile\n    //         ? cards.find(\n    //               (card) =>\n    //                   card.gridWidget &&\n    //                   card.gridWidget.gridElements &&\n    //                   card.gridWidget.gridElements.infoWithStyle[\"@type\"] ===\n    //                       \"type.googleapis.com/swiggy.seo.widgets.v1.SwiggyNotPresent\",\n    //           )\n    //         : cards.find(\n    //               (card) =>\n    //                   card.card &&\n    //                   card.card.card &&\n    //                   card.card.card[\"@type\"] ===\n    //                       \"type.googleapis.com/swiggy.seo.widgets.v1.SwiggyNotPresent\",\n    //           );\n\n    const desiredCard = isMobile ? cards.find(card => card.gridWidget && card.gridWidget.gridElements && card.gridWidget.gridElements.infoWithStyle[\"@type\"] === \"type.googleapis.com/swiggy.presentation.food.v2.RestaurantInfoWithStyle\") : cards.find(card => card.card && card.card.card && card.card.card.gridElements && card.card.card.gridElements.infoWithStyle && card.card.card.gridElements.infoWithStyle[\"@type\"] === \"type.googleapis.com/swiggy.presentation.food.v2.FavouriteRestaurantInfoWithStyle\");\n    const restaurants = isMobile ? desiredCard === null || desiredCard === void 0 ? void 0 : (_desiredCard$gridWidg = desiredCard.gridWidget) === null || _desiredCard$gridWidg === void 0 ? void 0 : (_desiredCard$gridWidg2 = _desiredCard$gridWidg.gridElements) === null || _desiredCard$gridWidg2 === void 0 ? void 0 : (_desiredCard$gridWidg3 = _desiredCard$gridWidg2.infoWithStyle) === null || _desiredCard$gridWidg3 === void 0 ? void 0 : _desiredCard$gridWidg3.restaurants : desiredCard === null || desiredCard === void 0 ? void 0 : (_desiredCard$card = desiredCard.card) === null || _desiredCard$card === void 0 ? void 0 : (_desiredCard$card$car = _desiredCard$card.card) === null || _desiredCard$card$car === void 0 ? void 0 : (_desiredCard$card$car2 = _desiredCard$card$car.gridElements) === null || _desiredCard$card$car2 === void 0 ? void 0 : (_desiredCard$card$car3 = _desiredCard$card$car2.infoWithStyle) === null || _desiredCard$card$car3 === void 0 ? void 0 : _desiredCard$card$car3.restaurants;\n    const filteredDetails = restaurants.map(shop => {\n      const {\n        id,\n        name,\n        cuisines,\n        avgRatingString,\n        sla,\n        cloudinaryImageId,\n        veg,\n        costForTwo\n      } = shop.info;\n      const {\n        deliveryTime\n      } = sla;\n      return {\n        id,\n        name,\n        cuisines,\n        avgRatingString,\n        deliveryTime,\n        cloudinaryImageId,\n        veg,\n        costForTwo\n      };\n    });\n    return filteredDetails; // Returning the parsed JSON data\n  } catch (error) {\n    console.error('Error fetching data:', error.message);\n    throw error;\n  }\n}\nexport default fetchData;","map":{"version":3,"names":["isMobile","fetchData","location","latitude","longitude","url","_desiredCard$gridWidg","_desiredCard$gridWidg2","_desiredCard$gridWidg3","_desiredCard$card","_desiredCard$card$car","_desiredCard$card$car2","_desiredCard$card$car3","response","fetch","ok","Error","responseData","json","cards","data","success","desiredCard","find","card","gridWidget","gridElements","infoWithStyle","restaurants","filteredDetails","map","shop","id","name","cuisines","avgRatingString","sla","cloudinaryImageId","veg","costForTwo","info","deliveryTime","error","console","message"],"sources":["E:/mostlySwiggy/frontend/src/Config/FetchData.js"],"sourcesContent":["import { isMobile } from \"react-device-detect\";\r\n\r\nasync function fetchData(location) {\r\n    const { latitude, longitude } = location;\r\n    const url = isMobile\r\n                ? `https://thingproxy-760k.onrender.com/fetch/https://www.swiggy.com/mapi/homepage/getCards?lat=${latitude}&lng=${longitude}`\r\n                : `https://thingproxy-760k.onrender.com/fetch/https://www.swiggy.com/dapi/restaurants/list/v5?lat=${latitude}&lng=${longitude}&is-seo-homepage-enabled=true&page_type=DESKTOP_WEB_LISTING`;\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        \r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data from Swiggy API');\r\n        }\r\n\r\n        const responseData = await response.json();\r\n\r\n        const cards = isMobile ? responseData.data.success.cards : responseData.data.cards;\r\n\r\n        // const locUnavailable = isMobile\r\n        //         ? cards.find(\r\n        //               (card) =>\r\n        //                   card.gridWidget &&\r\n        //                   card.gridWidget.gridElements &&\r\n        //                   card.gridWidget.gridElements.infoWithStyle[\"@type\"] ===\r\n        //                       \"type.googleapis.com/swiggy.seo.widgets.v1.SwiggyNotPresent\",\r\n        //           )\r\n        //         : cards.find(\r\n        //               (card) =>\r\n        //                   card.card &&\r\n        //                   card.card.card &&\r\n        //                   card.card.card[\"@type\"] ===\r\n        //                       \"type.googleapis.com/swiggy.seo.widgets.v1.SwiggyNotPresent\",\r\n        //           );\r\n\r\n        const desiredCard = isMobile\r\n                ? cards.find(\r\n                      (card) =>\r\n                          card.gridWidget &&\r\n                          card.gridWidget.gridElements &&\r\n                          card.gridWidget.gridElements.infoWithStyle[\"@type\"] ===\r\n                              \"type.googleapis.com/swiggy.presentation.food.v2.RestaurantInfoWithStyle\",\r\n                  )\r\n                : cards.find(\r\n                      (card) =>\r\n                          card.card &&\r\n                          card.card.card &&\r\n                          card.card.card.gridElements &&\r\n                          card.card.card.gridElements.infoWithStyle &&\r\n                          card.card.card.gridElements.infoWithStyle[\"@type\"] ===\r\n                              \"type.googleapis.com/swiggy.presentation.food.v2.FavouriteRestaurantInfoWithStyle\",\r\n                  );\r\n\r\n        const restaurants = isMobile\r\n                  ? desiredCard?.gridWidget?.gridElements?.infoWithStyle?.restaurants\r\n                  : desiredCard?.card?.card?.gridElements?.infoWithStyle?.restaurants;\r\n\r\n        const filteredDetails = restaurants.map((shop) => {\r\n            const {\r\n                id,\r\n                name,\r\n                cuisines,\r\n                avgRatingString,\r\n                sla,\r\n                cloudinaryImageId,\r\n                veg,\r\n                costForTwo,\r\n            } = shop.info;\r\n            const { deliveryTime } = sla;\r\n            return {\r\n                id,\r\n                name,\r\n                cuisines,\r\n                avgRatingString,\r\n                deliveryTime,\r\n                cloudinaryImageId,\r\n                veg,\r\n                costForTwo,\r\n            };\r\n        });\r\n        return filteredDetails; // Returning the parsed JSON data\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error.message);\r\n        throw error; \r\n    }\r\n}\r\n\r\nexport default fetchData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}